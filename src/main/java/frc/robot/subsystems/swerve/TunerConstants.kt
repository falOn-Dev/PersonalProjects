package frc.robot.generated

import com.ctre.phoenix6.configs.CANcoderConfiguration
import com.ctre.phoenix6.configs.CurrentLimitsConfigs
import com.ctre.phoenix6.configs.Pigeon2Configuration
import com.ctre.phoenix6.configs.Slot0Configs
import com.ctre.phoenix6.configs.TalonFXConfiguration
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants
import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory
import edu.wpi.first.math.util.Units

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
object TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.
    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private val steerGains: Slot0Configs = Slot0Configs()
        .withKP(100.0).withKI(0.0).withKD(0.05)
        .withKS(0.0).withKV(1.5).withKA(0.0)

    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private val driveGains: Slot0Configs = Slot0Configs()
        .withKP(3.0).withKI(0.0).withKD(0.0)
        .withKS(0.0).withKV(0.0).withKA(0.0)

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private val steerClosedLoopOutput = ClosedLoopOutputType.Voltage

    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private val driveClosedLoopOutput = ClosedLoopOutputType.Voltage

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private const val kSlipCurrentA = 150.0

    // Initial configs for the drive and steer motors and the CANcoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private val driveInitialConfigs = TalonFXConfiguration()
    private val steerInitialConfigs: TalonFXConfiguration = TalonFXConfiguration()
        .withCurrentLimits(
            CurrentLimitsConfigs() // Swerve azimuth does not require much torque output, so we can set a relatively low
                // stator current limit to help avoid brownouts without impacting performance.
                .withStatorCurrentLimit(60.0)
                .withStatorCurrentLimitEnable(true),
        )
    private val cancoderInitialConfigs = CANcoderConfiguration()

    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private val pigeonConfigs: Pigeon2Configuration? = null

    // Theoretical free speed (m/s) at 12v applied output;
    // This needs to be tuned to your individual robot
    const val kSpeedAt12VoltsMps: Double = 5.0

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private const val kCoupleRatio = 3.5

    private const val kDriveGearRatio = 7.363636364
    private const val kSteerGearRatio = 15.42857143
    private const val kWheelRadiusInches = 2.167 // Estimated at first, then fudge-factored to make odom match record

    private const val kSteerMotorReversed = true
    private const val kInvertLeftSide = false
    private const val kInvertRightSide = true

    private const val kCANbusName = "rio"
    private const val kPigeonId = 1

    // These are only used for simulation
    private const val kSteerInertia = 0.00001
    private const val kDriveInertia = 0.001

    // Simulated voltage necessary to overcome friction
    private const val kSteerFrictionVoltage = 0.25
    private const val kDriveFrictionVoltage = 0.25

    val DrivetrainConstants: SwerveDrivetrainConstants = SwerveDrivetrainConstants()
        .withCANbusName(kCANbusName)
        .withPigeon2Id(kPigeonId)
        .withPigeon2Configs(pigeonConfigs)

    private val ConstantCreator: SwerveModuleConstantsFactory = SwerveModuleConstantsFactory()
        .withDriveMotorGearRatio(kDriveGearRatio)
        .withSteerMotorGearRatio(kSteerGearRatio)
        .withWheelRadius(kWheelRadiusInches)
        .withSlipCurrent(kSlipCurrentA)
        .withSteerMotorGains(steerGains)
        .withDriveMotorGains(driveGains)
        .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
        .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
        .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
        .withSteerInertia(kSteerInertia)
        .withDriveInertia(kDriveInertia)
        .withSteerFrictionVoltage(kSteerFrictionVoltage)
        .withDriveFrictionVoltage(kDriveFrictionVoltage)
        .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
        .withCouplingGearRatio(kCoupleRatio)
        .withSteerMotorInverted(kSteerMotorReversed)
        .withDriveMotorInitialConfigs(driveInitialConfigs)
        .withSteerMotorInitialConfigs(steerInitialConfigs)
        .withCANcoderInitialConfigs(cancoderInitialConfigs)

    // Front Left
    private const val kFrontLeftDriveMotorId = 5
    private const val kFrontLeftSteerMotorId = 4
    private const val kFrontLeftEncoderId = 2
    private const val kFrontLeftEncoderOffset = -0.83544921875

    private const val kFrontLeftXPosInches = 10.5
    private const val kFrontLeftYPosInches = 10.5

    // Front Right
    private const val kFrontRightDriveMotorId = 7
    private const val kFrontRightSteerMotorId = 6
    private const val kFrontRightEncoderId = 3
    private const val kFrontRightEncoderOffset = -0.15234375

    private const val kFrontRightXPosInches = 10.5
    private const val kFrontRightYPosInches = -10.5

    // Back Left
    private const val kBackLeftDriveMotorId = 1
    private const val kBackLeftSteerMotorId = 0
    private const val kBackLeftEncoderId = 0
    private const val kBackLeftEncoderOffset = -0.4794921875

    private const val kBackLeftXPosInches = -10.5
    private const val kBackLeftYPosInches = 10.5

    // Back Right
    private const val kBackRightDriveMotorId = 3
    private const val kBackRightSteerMotorId = 2
    private const val kBackRightEncoderId = 1
    private const val kBackRightEncoderOffset = -0.84130859375

    private const val kBackRightXPosInches = -10.5
    private const val kBackRightYPosInches = -10.5

    val FrontLeft: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        kFrontLeftSteerMotorId,
        kFrontLeftDriveMotorId,
        kFrontLeftEncoderId,
        kFrontLeftEncoderOffset,
        Units.inchesToMeters(
            kFrontLeftXPosInches,
        ),
        Units.inchesToMeters(kFrontLeftYPosInches),
        kInvertLeftSide,
    )
    val FrontRight: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        kFrontRightSteerMotorId,
        kFrontRightDriveMotorId,
        kFrontRightEncoderId,
        kFrontRightEncoderOffset,
        Units.inchesToMeters(
            kFrontRightXPosInches,
        ),
        Units.inchesToMeters(kFrontRightYPosInches),
        kInvertRightSide,
    )
    val BackLeft: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        kBackLeftSteerMotorId,
        kBackLeftDriveMotorId,
        kBackLeftEncoderId,
        kBackLeftEncoderOffset,
        Units.inchesToMeters(
            kBackLeftXPosInches,
        ),
        Units.inchesToMeters(kBackLeftYPosInches),
        kInvertLeftSide,
    )
    val BackRight: SwerveModuleConstants = ConstantCreator.createModuleConstants(
        kBackRightSteerMotorId,
        kBackRightDriveMotorId,
        kBackRightEncoderId,
        kBackRightEncoderOffset,
        Units.inchesToMeters(
            kBackRightXPosInches,
        ),
        Units.inchesToMeters(kBackRightYPosInches),
        kInvertRightSide,
    )

    val moduleConstants: Array<SwerveModuleConstants> = arrayOf(FrontLeft, FrontRight, BackLeft, BackRight)
}
